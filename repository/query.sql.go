// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExistence = `-- name: CheckUserExistence :one
SELECT EXISTS(SELECT 1 FROM "user" WHERE id = $1)
`

func (q *Queries) CheckUserExistence(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createInvoice = `-- name: CreateInvoice :exec
INSERT INTO invoice (id, user_id, ref_id, total_amount, qr_url, expired_at) VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateInvoiceParams struct {
	ID          pgtype.UUID        `json:"id"`
	UserID      int64              `json:"user_id"`
	RefID       string             `json:"ref_id"`
	TotalAmount int32              `json:"total_amount"`
	QrUrl       string             `json:"qr_url"`
	ExpiredAt   pgtype.Timestamptz `json:"expired_at"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) error {
	_, err := q.db.Exec(ctx, createInvoice,
		arg.ID,
		arg.UserID,
		arg.RefID,
		arg.TotalAmount,
		arg.QrUrl,
		arg.ExpiredAt,
	)
	return err
}

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payment (id, user_id, invoice_id) VALUES ($1, $2, $3)
`

type CreatePaymentParams struct {
	ID        string      `json:"id"`
	UserID    int64       `json:"user_id"`
	InvoiceID pgtype.UUID `json:"invoice_id"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.Exec(ctx, createPayment, arg.ID, arg.UserID, arg.InvoiceID)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (id, first_name) VALUES ($1, $2)
`

type CreateUserParams struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.ID, arg.FirstName)
	return err
}

const getEpisodesByYear = `-- name: GetEpisodesByYear :many
SELECT episode FROM video WHERE library_year = $1 ORDER BY episode ASC
`

func (q *Queries) GetEpisodesByYear(ctx context.Context, libraryYear int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, getEpisodesByYear, libraryYear)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var episode int32
		if err := rows.Scan(&episode); err != nil {
			return nil, err
		}
		items = append(items, episode)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRunningManYears = `-- name: GetRunningManYears :many
SELECT year FROM library ORDER BY year ASC
`

func (q *Queries) GetRunningManYears(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getRunningManYears)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var year int32
		if err := rows.Scan(&year); err != nil {
			return nil, err
		}
		items = append(items, year)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoAndLibraryByEpisode = `-- name: GetVideoAndLibraryByEpisode :one
SELECT
  v.id AS video_id,
  l.id AS library_id,
  l.year
FROM video v JOIN library l ON v.library_year = l.year
WHERE v.episode = $1
`

type GetVideoAndLibraryByEpisodeRow struct {
	VideoID   pgtype.UUID `json:"video_id"`
	LibraryID int64       `json:"library_id"`
	Year      int32       `json:"year"`
}

func (q *Queries) GetVideoAndLibraryByEpisode(ctx context.Context, episode int32) (GetVideoAndLibraryByEpisodeRow, error) {
	row := q.db.QueryRow(ctx, getVideoAndLibraryByEpisode, episode)
	var i GetVideoAndLibraryByEpisodeRow
	err := row.Scan(&i.VideoID, &i.LibraryID, &i.Year)
	return i, err
}

const hasValidInvoice = `-- name: HasValidInvoice :one
SELECT EXISTS(SELECT 1 FROM invoice WHERE user_id = $1 AND expired_at > NOW())
`

func (q *Queries) HasValidInvoice(ctx context.Context, userID int64) (bool, error) {
	row := q.db.QueryRow(ctx, hasValidInvoice, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isInvoiceExpired = `-- name: IsInvoiceExpired :one
SELECT EXISTS(SELECT 1 FROM invoice WHERE id = $1 AND expired_at < NOW())
`

func (q *Queries) IsInvoiceExpired(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isInvoiceExpired, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUserSubscribed = `-- name: IsUserSubscribed :one
SELECT EXISTS(SELECT 1 FROM "user" WHERE id = $1 AND subscription_expired_at > NOW())
`

func (q *Queries) IsUserSubscribed(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, isUserSubscribed, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
