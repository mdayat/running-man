// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
)

const checkUserExistence = `-- name: CheckUserExistence :one
SELECT EXISTS(SELECT 1 FROM "user" WHERE id = $1)
`

func (q *Queries) CheckUserExistence(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUserVideo = `-- name: CheckUserVideo :one
SELECT EXISTS(SELECT 1 FROM collection WHERE user_id = $1 AND running_man_video_episode = $2)
`

type CheckUserVideoParams struct {
	UserID                 int64 `json:"user_id"`
	RunningManVideoEpisode int32 `json:"running_man_video_episode"`
}

func (q *Queries) CheckUserVideo(ctx context.Context, arg CheckUserVideoParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserVideo, arg.UserID, arg.RunningManVideoEpisode)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (id, first_name) VALUES ($1, $2)
`

type CreateUserParams struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.ID, arg.FirstName)
	return err
}

const getRunningManVideoPrice = `-- name: GetRunningManVideoPrice :one
SELECT price FROM running_man_video WHERE episode = $1
`

func (q *Queries) GetRunningManVideoPrice(ctx context.Context, episode int32) (int32, error) {
	row := q.db.QueryRow(ctx, getRunningManVideoPrice, episode)
	var price int32
	err := row.Scan(&price)
	return price, err
}

const getRunningManVideosByYear = `-- name: GetRunningManVideosByYear :many
SELECT episode FROM running_man_video WHERE running_man_library_year = $1 ORDER BY episode ASC
`

func (q *Queries) GetRunningManVideosByYear(ctx context.Context, runningManLibraryYear int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, getRunningManVideosByYear, runningManLibraryYear)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var episode int32
		if err := rows.Scan(&episode); err != nil {
			return nil, err
		}
		items = append(items, episode)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRunningManYears = `-- name: GetRunningManYears :many
SELECT year FROM running_man_library ORDER BY year ASC
`

func (q *Queries) GetRunningManYears(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getRunningManYears)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var year int32
		if err := rows.Scan(&year); err != nil {
			return nil, err
		}
		items = append(items, year)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
