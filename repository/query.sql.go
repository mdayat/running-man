// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
)

const checkUserExistence = `-- name: CheckUserExistence :one
SELECT EXISTS(SELECT 1 FROM "user" WHERE id = $1)
`

func (q *Queries) CheckUserExistence(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (id, first_name) VALUES ($1, $2)
`

type CreateUserParams struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.ID, arg.FirstName)
	return err
}

const getRunningManLibraries = `-- name: GetRunningManLibraries :many
SELECT id, year, created_at FROM running_man_library
`

func (q *Queries) GetRunningManLibraries(ctx context.Context) ([]RunningManLibrary, error) {
	rows, err := q.db.Query(ctx, getRunningManLibraries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RunningManLibrary
	for rows.Next() {
		var i RunningManLibrary
		if err := rows.Scan(&i.ID, &i.Year, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRunningManVideosByYear = `-- name: GetRunningManVideosByYear :many
SELECT id, running_man_library_year, episode, price, created_at FROM running_man_video WHERE running_man_library_year = $1
`

func (q *Queries) GetRunningManVideosByYear(ctx context.Context, runningManLibraryYear int32) ([]RunningManVideo, error) {
	rows, err := q.db.Query(ctx, getRunningManVideosByYear, runningManLibraryYear)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RunningManVideo
	for rows.Next() {
		var i RunningManVideo
		if err := rows.Scan(
			&i.ID,
			&i.RunningManLibraryYear,
			&i.Episode,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
