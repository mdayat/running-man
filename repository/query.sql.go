// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkInvoiceExpiration = `-- name: CheckInvoiceExpiration :one
SELECT EXISTS(SELECT 1 FROM invoice WHERE user_id = $1 AND running_man_video_episode = $2 AND expired_at > NOW())
`

type CheckInvoiceExpirationParams struct {
	UserID                 int64 `json:"user_id"`
	RunningManVideoEpisode int32 `json:"running_man_video_episode"`
}

func (q *Queries) CheckInvoiceExpiration(ctx context.Context, arg CheckInvoiceExpirationParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkInvoiceExpiration, arg.UserID, arg.RunningManVideoEpisode)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUserExistence = `-- name: CheckUserExistence :one
SELECT EXISTS(SELECT 1 FROM "user" WHERE id = $1)
`

func (q *Queries) CheckUserExistence(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUserVideo = `-- name: CheckUserVideo :one
SELECT EXISTS(SELECT 1 FROM collection WHERE user_id = $1 AND running_man_video_episode = $2)
`

type CheckUserVideoParams struct {
	UserID                 int64 `json:"user_id"`
	RunningManVideoEpisode int32 `json:"running_man_video_episode"`
}

func (q *Queries) CheckUserVideo(ctx context.Context, arg CheckUserVideoParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserVideo, arg.UserID, arg.RunningManVideoEpisode)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createInvoice = `-- name: CreateInvoice :exec
INSERT INTO invoice (id, user_id, running_man_video_episode, amount, expired_at) VALUES ($1, $2, $3, $4, $5)
`

type CreateInvoiceParams struct {
	ID                     pgtype.UUID        `json:"id"`
	UserID                 int64              `json:"user_id"`
	RunningManVideoEpisode int32              `json:"running_man_video_episode"`
	Amount                 int32              `json:"amount"`
	ExpiredAt              pgtype.Timestamptz `json:"expired_at"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) error {
	_, err := q.db.Exec(ctx, createInvoice,
		arg.ID,
		arg.UserID,
		arg.RunningManVideoEpisode,
		arg.Amount,
		arg.ExpiredAt,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (id, first_name) VALUES ($1, $2)
`

type CreateUserParams struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.ID, arg.FirstName)
	return err
}

const getEpisodesFromUserVideoCollection = `-- name: GetEpisodesFromUserVideoCollection :many
SELECT running_man_video_episode FROM collection WHERE user_id = $1
`

func (q *Queries) GetEpisodesFromUserVideoCollection(ctx context.Context, userID int64) ([]int32, error) {
	rows, err := q.db.Query(ctx, getEpisodesFromUserVideoCollection, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var running_man_video_episode int32
		if err := rows.Scan(&running_man_video_episode); err != nil {
			return nil, err
		}
		items = append(items, running_man_video_episode)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRunningManEpisodesByYear = `-- name: GetRunningManEpisodesByYear :many
SELECT episode FROM running_man_video WHERE running_man_library_year = $1 ORDER BY episode ASC
`

func (q *Queries) GetRunningManEpisodesByYear(ctx context.Context, runningManLibraryYear int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, getRunningManEpisodesByYear, runningManLibraryYear)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var episode int32
		if err := rows.Scan(&episode); err != nil {
			return nil, err
		}
		items = append(items, episode)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRunningManVideoAndLibraryByEpisode = `-- name: GetRunningManVideoAndLibraryByEpisode :one
SELECT
  v.id AS running_man_video_id,
  l.id AS running_man_library_id,
  l.year
FROM running_man_video v JOIN running_man_library l ON v.running_man_library_year = l.year
WHERE v.episode = $1
`

type GetRunningManVideoAndLibraryByEpisodeRow struct {
	RunningManVideoID   pgtype.UUID `json:"running_man_video_id"`
	RunningManLibraryID int64       `json:"running_man_library_id"`
	Year                int32       `json:"year"`
}

func (q *Queries) GetRunningManVideoAndLibraryByEpisode(ctx context.Context, episode int32) (GetRunningManVideoAndLibraryByEpisodeRow, error) {
	row := q.db.QueryRow(ctx, getRunningManVideoAndLibraryByEpisode, episode)
	var i GetRunningManVideoAndLibraryByEpisodeRow
	err := row.Scan(&i.RunningManVideoID, &i.RunningManLibraryID, &i.Year)
	return i, err
}

const getRunningManVideoPrice = `-- name: GetRunningManVideoPrice :one
SELECT price FROM running_man_video WHERE episode = $1
`

func (q *Queries) GetRunningManVideoPrice(ctx context.Context, episode int32) (int32, error) {
	row := q.db.QueryRow(ctx, getRunningManVideoPrice, episode)
	var price int32
	err := row.Scan(&price)
	return price, err
}

const getRunningManYears = `-- name: GetRunningManYears :many
SELECT year FROM running_man_library ORDER BY year ASC
`

func (q *Queries) GetRunningManYears(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getRunningManYears)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var year int32
		if err := rows.Scan(&year); err != nil {
			return nil, err
		}
		items = append(items, year)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
