// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payment (id, user_id, invoice_id, amount_paid, status) VALUES ($1, $2, $3, $4, $5)
`

type CreatePaymentParams struct {
	ID         string      `json:"id"`
	UserID     int64       `json:"user_id"`
	InvoiceID  pgtype.UUID `json:"invoice_id"`
	AmountPaid int32       `json:"amount_paid"`
	Status     string      `json:"status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.Exec(ctx, createPayment,
		arg.ID,
		arg.UserID,
		arg.InvoiceID,
		arg.AmountPaid,
		arg.Status,
	)
	return err
}

const getUserIDByInvoiceID = `-- name: GetUserIDByInvoiceID :one
SELECT user_id FROM invoice WHERE id = $1
`

func (q *Queries) GetUserIDByInvoiceID(ctx context.Context, id pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getUserIDByInvoiceID, id)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const updateUserSubscription = `-- name: UpdateUserSubscription :exec
UPDATE "user" SET subscription_expired_at = $2 WHERE id = $1
`

type UpdateUserSubscriptionParams struct {
	ID                    int64              `json:"id"`
	SubscriptionExpiredAt pgtype.Timestamptz `json:"subscription_expired_at"`
}

func (q *Queries) UpdateUserSubscription(ctx context.Context, arg UpdateUserSubscriptionParams) error {
	_, err := q.db.Exec(ctx, updateUserSubscription, arg.ID, arg.SubscriptionExpiredAt)
	return err
}
